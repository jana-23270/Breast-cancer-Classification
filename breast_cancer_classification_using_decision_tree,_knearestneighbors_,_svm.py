# -*- coding: utf-8 -*-
"""breast_cancer classification using Decision tree, KNearestNeighbors , SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Blz8Z8Iwq-fXvljvlcyFM82V5ALG5oo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/breast-cancer.csv')

df.head(10)

df.tail(10)

df.shape

df.info(10)

df.describe()

a=df['radius_mean']
plt.plot(a)

b=df['concave points_se']
c=df['concavity_worst']
plt.scatter(b,c)

d=df['area_worst']
plt.hist(d)

t=df['concave points_se']
plt.bar(t,height=100,width=100)

y=df['compactness_worst']
plt.pie(y)

A=df['fractal_dimension_se']
B=df['concavity_se']
sns.lineplot(x=A,y=B,data=df)

C=df['concave points_se']
D=df['area_mean']
sns.scatterplot(x=C,y=D,data=df)

E=df['perimeter_mean']
F=df['area_mean']
sns.barplot(x=E,y=F,data=df)

sns.countplot(x='area_mean',data=df)

sns.pairplot(df,hue='area_mean')

a=[23,45,65,67,45]
b=[10,20,30,40,50]
sns.distplot(a,b)

df.isnull().sum()

a=df['area_worst']
sns.boxplot(a)

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

e=df['diagnosis']
df['diagnosis']=le.fit_transform(e)

a=df.drop('diagnosis',axis=1)
a

b=df['diagnosis']
b

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(a,b,test_size=0.20,random_state=0)

x_train.shape

x_test.shape

from sklearn.preprocessing import StandardScaler

std=StandardScaler()

x=std.fit_transform(x_train)
x

from sklearn.tree import DecisionTreeClassifier

clf=DecisionTreeClassifier()

clf.fit(x_train,y_train)

pred=clf.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(pred,y_test)

from sklearn.metrics import confusion_matrix

confusion_matrix(pred,y_test)

from sklearn.tree import export_graphviz
import graphviz

graphviz.Source(export_graphviz(clf,feature_names=a.columns,filled=True))

from sklearn.neighbors import KNeighborsClassifier

clf1=KNeighborsClassifier(n_neighbors=7)

clf1.fit(x_train,y_train)

pred1=clf1.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(pred1,y_test)

from sklearn.metrics import confusion_matrix

confusion_matrix(pred1,y_test)

from sklearn.svm import SVC

CLF2=SVC()

CLF2.fit(x_train,y_train)

pred2=CLF2.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(pred2,y_test)

from sklearn.metrics import confusion_matrix

confusion_matrix(pred2,y_test)